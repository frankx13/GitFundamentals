		------CONFIG------

//IDENTITY
$ git config --global user.name "[Username]"
$ git config --global user.email [Email]
//EDITOR - MERGER
$ git config --global core.editor notepad++
$ git config --global merge.tool vimdiff
//COLORS
$ git config --global color.diff auto
$ git config --global color.status auto
$ git config --global color.branch auto

PS : --global will affect a settings to every action made with git, if we want an attribute repository specific, just remove it.

//ACCESS TO A LOCAL REPO PATH
root ~
$ cd /c/Users/[Username]/Desktop/[RepositoryName]
root ~/Users/[Username]/Desktop/[RepositoryName]

//INIT A LOCAL REPO
$ git init
Initialized empty Git repository in 
C:/Users/[Username]/Desktop/[RepositoryName].git

//CREATE POINTER TO DISTANT REPOSITORY = Github
$ git remote add [RepositoryName] https://github.com/[UserName]/[DistantRepoName].git

//CLONE DISTANT REPO ON LOCAL REPO
$ git clone https://github.com/[UserName]/[DistantRepoName].git

//GET EXISTING BRANCHS IN REPO
$ git branch

PS : on a new project, the main and only branche is always * master
=> the star before the branch name indicates this branch is the one we are actually using
WARNING : Until the first commit, no master branch exists

//CREATE LOCAL BRANCH
$ git branch [NameNewBranch]
=> this branch will now appear like so when we get existing ones :
* master
[NameNewBranch]

//POSITION GIT ON A BRANCH
$ git checkout [BranchTargetName]

//DELETE A BRANCH
standard deletion : $ git branch -d [BranchToDeleteName]
force deletion : $ git branch -D [BranchToDeleteName]

WARNING : using the force way to delete a branch will also delete all modifications non-commited on this branch

//MAKE A COMMIT
$ git commit -m “[Commit describing the action]”

//ADD A FILE TO INDEX
$ git add

//GET ACTIONS HISTORY
$ git reflog

//SEE THE FILES STATE
$ git status

//SEE ALL COMMITS MADE
$ git log
=> return the commits history (inversed chronological order)

//STASH A NON-COMMITED FILE TO ANOTHER BRANCH
$ git stash
Stashing a modification allows us to take it out of the current branch in order to affect it on another branch. The current branch is immediately freed from the modification.

Then, we place ourselves into the other branch and call this :
$ git stash apply
=> this will apply the last transfered modification done.

We can get a list of all the stashes made :
$ git stash list

Then, we can call the identifier with git stashn in order to transfer a former modification :
$ got stash apply stash@{STASHID} 

//STASH A COMMITED FILE TO ANOTHER BRANCH
If we want to cancel a commit on a modified file, we first need to get the ID of the commit call :
$ git log

Once we have it, we can delete the last commit made on the current branch :
$ git reset --hard HEAD^
=> HEAD^ indicates we want to delete the last commit made

Then, we will transfer the commit on the other branch with the ID we got :
$ git reset --hard [CommitID]
=> We can enter just the 8 first digit of the [CommitID] to make things simpler.

//CHANGE THE MESSAGE OF A COMMIT
WARNING : Only works for the last commit made!
$ git commit --amend -m "[NewCommitMessage]"

//ADD A FILE TO AN ALREADY MADE COMMIT
git add [FileToAdd]
git commit --amend --no-edit
=> the --no-edit paramater allows us to not modify the commit message

//CANCEL LAST PUBLIC COMMIT (on Distant Repo)
$ git revert HEAD^
=> Written in cancelation commit's history
=> no impact on commit standard history
=> it's better to use $git reset for private commit 

//OPEN FILE WITH EDITOR INSIDE GIT (here editor is VIM)
$ vim [FileName]

//FIX CASE : WRONG FILE COMMITED
In case we commited the wrong file and want to revert it, we can "Travel back in Time" in this case.
The princip is the following : a second commit will be created, that will counter the actions of the first one. It will not delete the first commit from the commit history, but establish how to cancel the change made by this commit, resulting in a second commit.
We use revert to do so.
=> The difference between reset and revert is that reset will not create a new commit.

So, when the wrong commit is made, we just need to use :
$ git revert HEAD

Then, we can remove our file and make the "repairing" commit.

//FIX CASE : WRONG COMMIT MADE
If $git log allows us to enumerate in inverse chronological order all the commits made, with an identifier SHA, the poster of the commit, the date et the message of the commit, there is also the command $git reflog, even more powerful.

$ git reflog allows us to log all commits, but also all the actions made locally.
It basically shows everything made.
We can then pick an action, and come back to this action like so :
$ git checkout [ActionID]
=> The ActionID does not have to be entire, we can also enter the 8 first digits.

//WHO MODIFIED THIS ?
We can also use Git to know who modified each line of a file.
To do so, we use : 
$ git blame [FileName]
It will examinate the content of a file line by line and the date of which each line has been modified, plus the name of the author.



		------CHERRY-PICKING------

Doing a "Cherry-pick" means that we will only merge some specific commits, not all the branch.
=> Cherry-picking in Git is not considerer to be a Good Practice, because it will also duplicate existing commits. When possible, we prefer to use merge.

So, by selecting the SHA of all the commits we want to cherry-pick, we can do this : 
git cherry-pick [SHAFirstCommit] [SHAOtherCommit] [Etc...]

This will add those commits to the master branch, without removing them from the current branch (=duplicate).




		------RESOLVE A CONFLICT------

If we have a conflict on the same file, we can easily fix it by opening directly an editor directly, choose which version we want and then commit the changes into Git.
1) $ vim [Filename]
2) Choose the modification we want to keep
3) $ git commit



		------LIFECYCLE------

//THE .git FILE
It will appear in the Hidden Folder of an initialized git repository on Windows.

//THE 3 MAIN LOCAL ZONES
Git handles the different versions of local repositories through 3 main local zones : 
1) The working directory = WD
2) The index
3) The local repository = Git directory/repository 

The index represents all modified files that will appear in our next commit.
When we use $ git add, it puts the newly added file from the working directory to the index.

The local repository is the history of all the actions (commits, configurations...), a kind of archive repository.
When we use $ git commit, it puts the files from the index into the git repository.
We can see all those archives and their SHA by calling $ git reflog
=> It's useful the come back on a specific commit!
The SHA is the identifier of an action.



		------DISTANT ACCESS------

Git's authentication system uses and relies on the SSH keys mecanism.

To generate our SSH keys, we use this command in Git :
$ ssh-keygen -t rsa -b 4096 -C "[UserMail]"
Then we can either press Enter or specify a filename. The generated SSH key can be found in an hidden folder in C:\Users\[Username]\.ssh
The public key (id_rsa.pub) and the private key (id_rsa.txt) will appear there.

We can now add our key to our Github account : 
Login into Github, and click on settings on the top right corner.
Click on SSH and GPG keys.
New SSH Key.
Choose a title and paste the SSH key.
Confirm the account password and the key will be successfully added.



		------GIT RESET------

The $git reset command is a polyvalent tool to cancel the changes made.
It can be called by three different ways with different argument :
1) --soft
2) --mixed
3) --hard

HARD
$ git reset [TargetCommitID] --hard will come back to any commit made in the past.
=> useful when, for example, we make a mistake on a functionnality and we want to restart from the beginning.
WARNING : Everything made after the commit will be forgotten, we should take caution when using it.

MIXED
$ git reset HEAD~ allows us to come back just before the last commit, or the last commit specified, not deleting the ongoing modifications. It will also create an untied HEAD. 
If no arguments are specified, git reset is the equivalent to git reset --mixed by default.
Just typing "$ git reset" is the equivalent of typing "$ git reset --mixed HEAD~".
=> can be useful when we have indexed files not yet commited (= added), in order to deindex them.

SOFT
$ git reset --soft will place ourselves on a specific commit, in order to see the code at a T time or to create a branch from a former commit. It does not delete anything, and does not create any untied HEAD.

In the lifecycle, each one acts on a level :
--hard acts in the working directory directly
--mixed acts on the index
--soft acts in the local directory



		------WHAT IS THE HEAD ?------

In Git, the HEAD is a pointer, serving as reference of our current position in our Git working repository. By default, the HEAD points towards the current branch, but it can be moved towards another branch/another commit.



		------THE GIT TREE AND ITS STRUCTURE------

Git has three principal object types, plus a secondary one.

The three principals are :
1) The TREE or Git tree, that is a kind of repository. It references a list of trees and blobs (= subdirectories and files).
2) The COMMIT, which points towars a specific tree and mark it, in order to represent its state at a T time.
3) The BLOB, usually representing a file (= Binary Large OBject).

=> To stock and order files and repositories, Git use their SHA-1 fingerprint.

The last and secondary object is the TAG. It represents a commit of a specific version.

The hash SHA-1 is a cryptographic string of 40 characters used to identify a file.

For two different object, it's impossible to have the same identifier, because Git recognize it by their SHA-1.

The commit being an object, it also have a SHA-1 unique identifier.
SHA-1 online generator : https://www.sha1.fr/



		------MERGING BRANCHES------

The optimal use of a $git merge should be used only for merge branches when the branch to merge is finished and functionnal. 
The merging is realizing a fusion, it combines several sequences of commits into one unified history.
It is the most often used to combine two branches, and will create a new merge commit.



		------PULL & PUSH------

$ git pull will download locally the modifications that happened on the distant repository. It is the combination of the commands $git merge & $git fetch, the pull will create a merge commit like the standard $git merge.

$git pull first use $git fetch to download the content, then the $git merge to merge the distant repository modifications and create a new merge commit locally.

It is used like so :
$ git pull [DistantRepoName]

On the contrary, $git push will send modifications made locally to the distant repository :
$ git push [DistantRepoName]



		------GIT FETCH------

$git fetch will fetch modifications on the distant repo, but not merge it with our local modifications. Git will isolate the content fetched as local content, so this does not affect the local work. 

$git fetch will fetch all data from the commits made on the current branch that don't yet exist in our local version. Those datas are stocked inside the local work repository, but not merge if we don't call $git merge.

PULL OR FETCH ?
=> $ git pull comes in handy to automatise the data update, but can create many conflicts on big projects.
=> $ git fetch allows us to keep the work repository up-to-date and control the moment where to merge datas.



		------GIT REBASE------

$ git rebase has the same purpose than $git merge = to transfer changes from one branch to another, only the way of doing it change.
Rebasing allows to rewrite the history.
There are two types of rebasing : 
1) - Manual rebase
2) - Interactive rebase

Rebasing change the base of a branch from a commit to another, giving the illusion that we create a branch from a different commit. Git will then take the modifications of a branch and transfer it on another.

=> rebasing permit to keep a clearer history.
WARNING : NEVER rebase some commits already pushed on the public repository! This will replace the former commits of the public repo, it would brutally make it disappear.

$ git rebase apply the commits to the current branch and to the end of the transfered branch.

$ git rebase -i start an interactive rebasing session. It will allows us to move the commits one by one with the possibility to modify and delete them.
This action opens an editor in which we can enter some commands for each commit to rebase. Commands list :

- p, pick = use the commit
- r, reword = use the commit by modifying its message
- e, edit = use the commit by bringing some changes
- s, squash = use the commit but integrate it to the precedent commit
- f, fixup = like squash but in addition, we can cancel the log message of this commit
- x, exec = execute the command via Shell
- d, drop = delete the commit

=> Having a total control of the commit history when we rebase, rebasing is mainly used to clean our history.

//Modify the commits order
It can serve to modify the commits order too.
=> if we have 3 commits (com1, com2, com3), we would use :
$ git rebase -i HEAD~3 
This permit to rebase only the 3 last commits.

Then, we would use the pick command to indicate in which order to place them : 
pick 14hg58g1 com2
pick 25frgf83 com3
pick 96zkof75 com1

//Modify the commits validation message
We can also modify the commit messages, here is an example if we want to modify the last commit :
1) $ git rebase -i HEAD^
2) edit 54dfiosd 
3) Save and leave the editor.
4) $ git commit --amend
5) $ git rebase --continue

//Clean a branch from the two last commits
1) $ git rebase -i HEAD~2
2) drop 58gkbg56 commit52
    drop 899hbg78 commit53

//Delete the useless branches
1) git branch -d [NameBranchToDelete]

//Merge several commits into one (= Squashing)
1) $ git rebase -i HEAD~3 //Select three last commits
2) pick 57dcsd58 Création du formulaire
    squash 58gkbg56 Design Formulaire
    squash 899hbg78 Correction du formulaire 

There, the first commit will have the two other commits applied to him to make only one commit.



		------GIT BISECT------

$git bisect allows us to tell Git we are searching a bug, Git will then move from commit to commit, and make us test each one for us to say if the bug is there or not. The goal is to find the first commit where the bug happenned.
=> More commits means a bisect more accurate.

To start, we use : 
bad = hash of a commit where the bug is present
good = hash of a commit where the bug is not present
1) $ git bisect start [bad] [good]
2) $ git bisect good // if the commit does not have the bug
    $ git bisect bad // if the commit have the bug



		------SUBTREES & SUBMODULES------

Submodule = repository inside a repository
A git submodule allows us to integrate another Git repository inside our current project. The commit management can be done separately for each repository.

To use it :
$ git submodule add [DistantSubModule] [LocalDestination]

Subtree = allows us to create a new commit tree for a subrepository of our Git repository. It regenerates the history of a repository :
$ git subtree push -P [NameRepositoryLocal] [DistantRepository] master
=> The local repo will be pushed on the new distant repo on the master branch.



		------GIT WORKFLOW------

A Git workflow is a recommendation on how to use Git to achieve a more productive and coherent work. The most famous is GITFLOW.
Those workflows are designed serve as reference, so they do not constitue concrete rules.

Another popular workflow is the FORKING WORKFLOW :
Instead of using an unique repository server-side based to use as the central codebase, this workflow provides a repository server-side based for each developer. Consequently, each contributor has two Git repositories : 
- One private, local-side
- One public, server-side
This workflow is mainly used in the Open-Source projects.

The FUNCTIONNALITIES WORKFLOW is also popular :
The base principle is that each functionnality is developed in a branch designed for it, instead of the master branch.
Because of this encapsulation, many developers can easily work on the same functionnality without modifying the central codebase. 
This workflow is mainly used in the Continuous Integration projects.

The GITFLOW, created by Vincent Driessen, is a method, a Git architecture allowing to separate work as much as possible and to touch the master branch as little as possible. This method therefore represents an architecture in branches.
It attributes some very specific roles to the different branches and defines how and when they must interact. 

//Use GitFlow
To use it, we first need to install GitFlow.
Then, we can use it in our project by calling :
$ git flow init
GitFlow will first define two distinct branches :
- Master, representing our production environement, where we cannot push directly our modifications
- Develop, centralizing all the new functionnalities that will be delivered in the next version. It's best not to do modifications in it directly.
It correspond to our recipe environment. The recipe environment is a copy of the project that is supposed to move in production and where the testers will realize several tests to remove all bugs.
The master branch stock the official history of versions, et the develop branch serve as the integrative branch for functionnalities.

To those two branches will be added three more branch types :
- Feature
- Hotfix
- Release

Feature branches allows us to start working on a new functionnality. This branch is created from the Develop branch. For each new functionnality, we must have a Feature branch. When the functionnality is ready, we will commit it then merge it on the Develop branch.

Hotfix branch will correct a bug happening in production. This branch will be created from the Master one. Once finished, the Hotfix branch will be merged into to Develop and Master branches. (it's best to use it only for minor modifications).

Release branch is created from the Develop branch when the delivery of the production is imminent. Once all functionnalities of a version have been created, we then can create a Release branch. It will allows us to realize our test while other developers could start to work on the next version. When the Release branch is terminated, we merge it in the Develop and the Master branches.

Once the project is initialized with $git flow init, we can create a new feature, the base of our project : 
$ git flow feature start main
This command will create the Feature main and basculate us on it.



		------IMPROVE GIT WITH TOOLS------